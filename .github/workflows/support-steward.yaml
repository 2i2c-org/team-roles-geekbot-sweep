name: Support Steward

on:
  workflow_dispatch:
    inputs:
      update-roles:
        required: false
        type: boolean
        default: false
        description: |
          Whether or not to update the Team Roles or proceed with those currently saved
          in the team-roles.json file. If True, the file will be updated and new members
          will be used in the standup. If False (default), the file will not be updated
          and the members currently listed there will be used in the standup.
      update-calendar:
        required: false
        type: boolean
        default: false
        description: |
          Whether or not to add a new event to the Team Roles calendar. If True, a new
          event will be added.
      usergroup-name:
        required: false
        default: support-stewards
        description: |
          The Slack usergroup our Support Stewards are generated from
  schedule:
    - cron: "0 0 * * MON"  # Run at 00:00 UTC weekly on Mondays

env:
  USERGROUP_NAME: support-stewards

jobs:
  is-two-weeks:
    runs-on: ubuntu-latest
    outputs:
      continue-workflow: ${{ steps.decision.outputs.continue-workflow }}
    steps:
      - name: Decide if 2 weeks have passed and the workflow should continue
        id: decision
        shell: python
        run: |
          import os
          from datetime import date

          # This is a Monday before our last support steward transfer (Apr 27, 2022),
          # so we'll calculate is_two_weeks relative to this
          ref_date = date(2022, 4, 25)

          diff_days = abs(date.today() - ref_date).days
          n_days_since = diff_days % 14  # Because we transfer the role every 14 days
          n_weeks_since = (n_days_since // 7) + 1  # Add 1 because we are effectively 0-indexed
          is_two_weeks = (n_weeks_since % 2) == 0

          # Set output variable for use in further jobs
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              print(f'continue-workflow={is_two_weeks}', file=f)

      - name: Echo outputs
        run: |
          echo "continue-workflow: ${{ steps.decision.outputs.continue-workflow }}"
          echo "update-roles: ${{ github.event.inputs.update-roles }}"

  create-standup:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs:
      - is-two-weeks
    if: needs.is-two-weeks.outputs.continue-workflow == 'True' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Python v3.9
        uses: actions/setup-python@v4.5.0
        with:
          python-version: "3.9"

      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv if one exists
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies if cache does not exist
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install library
        run: poetry install --no-interaction

      # This action use the github official cache mechanism internally
      - name: Install sops
        uses: mdgreenwald/mozilla-sops-action@v1.4.1
        with:
          version: v3.7.2

      - name: Setup sops credentials to decrypt repo secrets
        uses: google-github-actions/auth@v1
        with:
          credentials_json: "${{ secrets.GCP_KMS_DECRYPTOR_KEY }}"

      - name: Update team member in role
        if: github.event_name == 'schedule' || github.event.inputs.update-roles == 'true'
        run: |
          source .venv/bin/activate
          poetry run update-team-role support-steward
        env:
          USERGROUP_NAME: "${{ github.event.inputs.usergroup-name || env.USERGROUP_NAME }}"

      - name: Add and Commit updated team-roles.json file
        if: github.event_name == 'schedule' || github.event.inputs.update-roles == 'true'
        uses: EndBug/add-and-commit@v9
        with:
          add: team-roles.json
          message: "Update the Team Roles JSON file"

      - name: Create a standup for the Support Steward
        run: |
          source .venv/bin/activate
          poetry run create-standup support-steward

  update-calendar:
    runs-on: ubuntu-latest
    needs:
      - is-two-weeks
      - create-standup
    if: |
      github.event.inputs.update-calendar == 'true'
      || (github.event_name == 'schedule'
      && needs.is-two-weeks.outputs.continue-workflow == 'True')
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Python v3.9
        uses: actions/setup-python@v4.5.0
        with:
          python-version: "3.9"

      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv if one exists
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies if cache does not exist
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install library
        run: poetry install --no-interaction

      # This action use the github official cache mechanism internally
      - name: Install sops
        uses: mdgreenwald/mozilla-sops-action@v1.4.1
        with:
          version: v3.7.2

      - name: Setup sops credentials to decrypt repo secrets
        uses: google-github-actions/auth@v1
        with:
          credentials_json: "${{ secrets.GCP_KMS_DECRYPTOR_KEY }}"

      - name: Create next Support Steward event in the calendar
        run: |
          source .venv/bin/activate
          poetry run create-next-event support-steward
        env:
          USERGROUP_NAME: "${{ github.event.inputs.usergroup-name || env.USERGROUP_NAME }}"
